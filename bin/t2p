#!/usr/bin/env python3

import configparser
import argparse
import os
from typing import Type

# Import the module
import t2p


def get_logger():
    logger = t2p.logger.getChild('CLI')
    return logger


def get_args(cls: Type[t2p.TasksProcessor]):
    argparser = argparse.ArgumentParser(
        description='Telegram Dumper to chats or channels')

    # Set general arguments
    argparser.add_argument(
        '-c',
        '--config',
        required=True,
        dest='configpath',
        help='Set the path to the config file.'
    )
    argparser.add_argument(
        '-v',
        '--verbose',
        action='store_true',
        help='Set mode verbose.'
    )

    # Sub-commands

    subparsers = argparser.add_subparsers(
        description='These are the available commands.',
        dest='command',
        help='available commands'
    )

    for group, classes in cls.available_taskers.items():
        argparser_group = subparsers.add_parser(group)
        argparser_subparser = argparser_group.add_subparsers(
            description=f'These are the available subcommands for "{group}".',
            dest='subcommand',
            help='available subsubcommands'
        )
        for _cls in classes:
            _cls.prepare(argparser_subparser)

    cli_args = argparser.parse_args()
    return cli_args


def main():
    logger = get_logger()
    cli_args = get_args(t2p.TasksProcessor)

    # Get the configuration
    config = configparser.ConfigParser()

    # Read the INI file
    if not os.path.exists(cli_args.configpath):
        logger.critical(
            'The config file %s does not exist', cli_args.configpath)
        exit(-1)
    else:
        config.read(cli_args.configpath)

    logger.debug(cli_args)
    logger.debug(cli_args.command)

    # Create the tasks processor
    tp = t2p.TasksProcessor(config)

    # Prepare the task name and run it
    task_name = f'{cli_args.command}_{cli_args.subcommand}'
    logger.info('Run task "%s"', task_name)
    tp.run_task(task_name, cli_args)


if __name__ == '__main__':
    main()
